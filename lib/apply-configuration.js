// Generated by CoffeeScript 1.6.3
var EventEmitter, applyConfiguration, logger,
  __hasProp = {}.hasOwnProperty;

EventEmitter = require('events').EventEmitter;

logger = require('./logger');

applyConfiguration = function(config) {
  var authHeader, coerceToArray, configuration, key, method, value, _i, _len, _ref;
  coerceToArray = function(value) {
    if (typeof value === 'string') {
      return value = [value];
    } else if (value == null) {
      return value = [];
    } else if (value instanceof Array) {
      return value;
    } else {
      return value;
    }
  };
  configuration = {
    blueprintPath: null,
    server: null,
    emitter: new EventEmitter,
    options: {
      'dry-run': false,
      silent: false,
      reporter: null,
      output: null,
      debug: false,
      header: null,
      user: null,
      'inline-errors': false,
      details: false,
      method: [],
      color: true,
      level: 'info',
      timestamp: false,
      sorted: false,
      names: false,
      hookfiles: null
    }
  };
  for (key in config) {
    if (!__hasProp.call(config, key)) continue;
    value = config[key];
    configuration[key] = value;
  }
  configuration.options.reporter = coerceToArray(configuration.options.reporter);
  configuration.options.output = coerceToArray(configuration.options.output);
  configuration.options.header = coerceToArray(configuration.options.header);
  configuration.options.method = coerceToArray(configuration.options.method);
  _ref = configuration.options.method;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    method = _ref[_i];
    method.toUpperCase();
  }
  if (configuration.options.user != null) {
    authHeader = 'Authorization:Basic ' + new Buffer(configuration.options.user).toString('base64');
    configuration.options.header.push(authHeader);
  }
  logger.transports.console.colorize = configuration.options.color;
  logger.transports.console.silent = configuration.options.silent;
  logger.transports.console.level = configuration.options.level;
  logger.transports.console.timestamp = configuration.options.timestamp;
  logger.sys.transports.systemConsole.colorize = configuration.options.color;
  logger.sys.transports.systemConsole.silent = configuration.options.silent;
  logger.sys.transports.systemConsole.level = configuration.options.level;
  logger.sys.transports.systemConsole.timestamp = configuration.options.timestamp;
  return configuration;
};

module.exports = applyConfiguration;

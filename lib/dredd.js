// Generated by CoffeeScript 1.6.3
var Dredd, Runner, applyConfiguration, blueprintAstToRuntime, configureReporters, fs, handleRuntimeProblems, logger, options, protagonist,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

fs = require('fs');

protagonist = require('protagonist');

logger = require('./logger');

options = require('./options');

Runner = require('./transaction-runner');

applyConfiguration = require('./apply-configuration');

handleRuntimeProblems = require('./handle-runtime-problems');

blueprintAstToRuntime = require('./blueprint-ast-to-runtime');

configureReporters = require('./configure-reporters');

Dredd = (function() {
  function Dredd(config) {
    this.transactionsComplete = __bind(this.transactionsComplete, this);
    this.tests = [];
    this.stats = {
      tests: 0,
      failures: 0,
      errors: 0,
      passes: 0,
      skipped: 0,
      start: 0,
      end: 0,
      duration: 0
    };
    this.configuration = applyConfiguration(config, this.stats);
    configureReporters(this.configuration, this.stats, this.tests);
    this.runner = new Runner(this.configuration);
  }

  Dredd.prototype.run = function(callback) {
    var blueprintParsingComplete, config, stats,
      _this = this;
    config = this.configuration;
    stats = this.stats;
    fs.readFile(config.blueprintPath, 'utf8', function(parseError, data) {
      var reporterCount;
      if (parseError) {
        return callback(parseError, stats);
      }
      reporterCount = config.emitter.listeners('start').length;
      return config.emitter.emit('start', data, function() {
        reporterCount--;
        if (reporterCount === 0) {
          return protagonist.parse(data, blueprintParsingComplete);
        }
      });
    });
    return blueprintParsingComplete = function(protagonistError, result) {
      var runtime, runtimeError;
      if (protagonistError) {
        return callback(protagonistError, config.reporter);
      }
      runtime = blueprintAstToRuntime(result['ast']);
      runtimeError = handleRuntimeProblems(runtime);
      if (runtimeError) {
        return callback(runtimeError, stats);
      }
      return _this.runner.run(runtime['transactions'], function() {
        return _this.transactionsComplete(callback);
      });
    };
  };

  Dredd.prototype.transactionsComplete = function(callback) {
    var reporterCount, stats;
    stats = this.stats;
    reporterCount = this.configuration.emitter.listeners('end').length;
    return this.configuration.emitter.emit('end', function() {
      reporterCount--;
      if (reporterCount === 0) {
        return callback(null, stats);
      }
    });
  };

  return Dredd;

})();

module.exports = Dredd;

module.exports.options = options;

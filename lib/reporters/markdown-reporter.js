// Generated by CoffeeScript 1.6.3
var EventEmitter, MarkdownReporter, file, fs, logger, prettifyResponse,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

EventEmitter = require('events').EventEmitter;

fs = require('fs');

file = require('file');

logger = require('./../logger');

prettifyResponse = require('./../prettify-response');

MarkdownReporter = (function(_super) {
  __extends(MarkdownReporter, _super);

  function MarkdownReporter(emitter, stats, tests, path, details) {
    this.configureEmitter = __bind(this.configureEmitter, this);
    this.sanitizedPath = __bind(this.sanitizedPath, this);
    MarkdownReporter.__super__.constructor.call(this);
    this.type = "markdown";
    this.stats = stats;
    this.tests = tests;
    this.path = this.sanitizedPath(path);
    this.buf = "";
    this.level = 1;
    this.details = details;
    this.configureEmitter(emitter);
  }

  MarkdownReporter.prototype.sanitizedPath = function(path) {
    var filePath;
    filePath = path != null ? file.path.abspath(path) : file.path.abspath("./report.md");
    if (fs.existsSync(filePath)) {
      logger.info("File exists at " + filePath + ", will be overwritten...");
    }
    return filePath;
  };

  MarkdownReporter.prototype.configureEmitter = function(emitter) {
    var title,
      _this = this;
    title = function(str) {
      return Array(_this.level).join("#") + " " + str;
    };
    emitter.on('start', function(rawBlueprint, callback) {
      _this.level++;
      _this.buf += title('Dredd Tests') + "\n";
      return callback();
    });
    emitter.on('end', function(callback) {
      return fs.writeFile(_this.path, _this.buf, function(err) {
        if (err) {
          logger.error(err);
        }
        return callback();
      });
    });
    emitter.on('test start', function(test) {
      return _this.level++;
    });
    emitter.on('test pass', function(test) {
      _this.buf += title("Pass: " + test.title) + "\n";
      if (_this.details) {
        _this.level++;
        _this.buf += title("Request") + "\n```\n" + prettifyResponse(test.request) + "\n```\n\n";
        _this.buf += title("Expected") + "\n```\n" + prettifyResponse(test.expected) + "\n```\n\n";
        _this.buf += title("Actual") + "\n```\n" + prettifyResponse(test.actual) + "\n```\n\n";
        _this.level--;
      }
      return _this.level--;
    });
    emitter.on('test skip', function(test) {
      _this.buf += title("Skip: " + test.title) + "\n";
      return _this.level--;
    });
    emitter.on('test fail', function(test) {
      _this.buf += title("Fail: " + test.title + "\n");
      _this.level++;
      _this.buf += title("Message") + "\n```\n" + test.message + "\n```\n\n";
      _this.buf += title("Request") + "\n```\n" + prettifyResponse(test.request) + "\n```\n\n";
      _this.buf += title("Expected") + "\n```\n" + prettifyResponse(test.expected) + "\n```\n\n";
      _this.buf += title("Actual") + "\n```\n" + prettifyResponse(test.actual) + "\n```\n\n";
      _this.level--;
      return _this.level--;
    });
    return emitter.on('test error', function(error, test) {
      _this.buf += title("Error: " + test.title + "\n");
      _this.buf += "\n```\n";
      _this.buf += "\nError: \n" + error + "\nStacktrace: \n" + error.stack + "\n";
      _this.buf += "```\n\n";
      return _this.level--;
    });
  };

  return MarkdownReporter;

})(EventEmitter);

module.exports = MarkdownReporter;

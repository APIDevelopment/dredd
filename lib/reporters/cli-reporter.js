// Generated by CoffeeScript 1.6.3
var CliReporter, logger, prettifyResponse,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

logger = require('./../logger');

prettifyResponse = require('./../prettify-response');

CliReporter = (function() {
  function CliReporter(emitter, stats, tests, inlineErrors, details) {
    this.configureEmitter = __bind(this.configureEmitter, this);
    this.type = "cli";
    this.stats = stats;
    this.tests = tests;
    this.configureEmitter(emitter);
    this.inlineErrors = inlineErrors;
    this.details = details;
    this.errors = [];
  }

  CliReporter.prototype.configureEmitter = function(emitter) {
    var _this = this;
    emitter.on('start', function(rawBlueprint, callback) {
      logger.info('Beginning Dredd testing...');
      return callback();
    });
    emitter.on('end', function(callback) {
      var test, _i, _len, _ref;
      if (!_this.inlineErrors) {
        if (_this.errors.length !== 0) {
          logger.info("Displaying failed tests...");
        }
        _ref = _this.errors;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          test = _ref[_i];
          logger.fail(test.title + (" duration: " + test.duration + "ms"));
          logger.fail(test.message);
          logger.request("\n" + prettifyResponse(test.request) + "\n");
          logger.expected("\n" + prettifyResponse(test.expected) + "\n");
          logger.actual("\n" + prettifyResponse(test.actual) + "\n\n");
        }
      }
      if (_this.stats.tests > 0) {
        logger.complete("" + _this.stats.passes + " passing, " + _this.stats.failures + " failing, " + _this.stats.errors + " errors, " + _this.stats.skipped + " skipped");
      }
      logger.complete("Tests took " + _this.stats.duration + "ms");
      return callback();
    });
    emitter.on('test pass', function(test) {
      logger.pass(test.title + (" duration: " + test.duration + "ms"));
      if (_this.details) {
        logger.request("\n" + prettifyResponse(test.request) + "\n");
        logger.expected("\n" + prettifyResponse(test.expected) + "\n");
        return logger.actual("\n" + prettifyResponse(test.actual) + "\n\n");
      }
    });
    emitter.on('test skip', function(test) {
      return logger.skip(test.title);
    });
    emitter.on('test fail', function(test) {
      logger.fail(test.title + (" duration: " + test.duration + "ms"));
      if (_this.inlineErrors) {
        logger.fail(test.message);
        logger.request("\n" + prettifyResponse(test.request) + "\n");
        logger.expected("\n" + prettifyResponse(test.expected) + "\n");
        return logger.actual("\n" + prettifyResponse(test.actual) + "\n\n");
      } else {
        return _this.errors.push(test);
      }
    });
    return emitter.on('test error', function(error, test) {
      if (!_this.inlineErrors) {
        _this.errors.push(test);
      }
      logger.error(test.title + (" duration: " + test.duration + "ms"));
      return logger.error(error.stack);
    });
  };

  return CliReporter;

})();

module.exports = CliReporter;

// Generated by CoffeeScript 1.6.3
var DotReporter, logger, prettifyResponse,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

logger = require('./../logger');

prettifyResponse = require('./../prettify-response');

DotReporter = (function() {
  function DotReporter(emitter, stats, tests, details) {
    this.configureEmitter = __bind(this.configureEmitter, this);
    this.type = "dot";
    this.stats = stats;
    this.tests = tests;
    this.configureEmitter(emitter);
    this.errors = [];
  }

  DotReporter.prototype.configureEmitter = function(emitter) {
    var _this = this;
    emitter.on('start', function() {
      return logger.info('Beginning Dredd testing...');
    });
    emitter.on('end', function(callback) {
      var test, _i, _len, _ref;
      if (_this.stats.tests > 0) {
        if (_this.errors.length > 0) {
          _this.write("\n");
          logger.info("Displaying failed tests...");
          _ref = _this.errors;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            test = _ref[_i];
            logger.fail(test.title + (" duration: " + test.duration + "ms"));
            logger.fail(test.message);
            logger.request("\n" + prettifyResponse(test.request) + "\n");
            logger.expected("\n" + prettifyResponse(test.expected) + "\n");
            logger.actual("\n" + prettifyResponse(test.actual) + "\n\n");
          }
        }
        _this.write("\n");
        logger.complete("" + _this.stats.passes + " passing, " + _this.stats.failures + " failing, " + _this.stats.errors + " errors, " + _this.stats.skipped + " skipped");
        logger.complete("Tests took " + _this.stats.duration + "ms");
        return callback();
      }
    });
    emitter.on('test pass', function(test) {
      return _this.write(".");
    });
    emitter.on('test skip', function(test) {
      return _this.write("-");
    });
    emitter.on('test fail', function(test) {
      _this.write("F");
      return _this.errors.push(test);
    });
    return emitter.on('test error', function(error, test) {
      _this.write("E");
      test.message = "\nError: \n" + error + "\nStacktrace: \n" + error.stack + "\n";
      return _this.errors.push(test);
    });
  };

  DotReporter.prototype.write = function(str) {
    return process.stdout.write(str);
  };

  return DotReporter;

})();

module.exports = DotReporter;

// Generated by CoffeeScript 1.6.3
var ApiaryReporter, http, https, logger, os, packageConfig, url, uuid,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

uuid = require('node-uuid');

http = require('http');

https = require('https');

os = require('os');

url = require('url');

packageConfig = require('./../../package.json');

logger = require('./../logger');

String.prototype.startsWith = function(str) {
  return this.slice(0, str.length) === str;
};

ApiaryReporter = (function() {
  function ApiaryReporter(emitter, stats, tests, inlineErrors) {
    this._performRequest = __bind(this._performRequest, this);
    this.configureEmitter = __bind(this.configureEmitter, this);
    this.type = "cli";
    this.stats = stats;
    this.tests = tests;
    this.uuid = null;
    this.startedAt = null;
    this.endedAt = null;
    this.remoteId = null;
    this.configureEmitter(emitter);
    this.inlineErrors = inlineErrors;
    this.errors = [];
    this.verbose = process.env['DREDD_REST_DEBUG'] != null;
    this.configuration = {
      apiUrl: process.env['DREDD_REST_URL'] || "https://api.apiary.io",
      apiToken: process.env['DREDD_REST_TOKEN'] || null,
      apiSuite: process.env['DREDD_REST_SUITE'] || null
    };
    logger.info('Using apiary reporter.');
  }

  ApiaryReporter.prototype.configureEmitter = function(emitter) {
    var _this = this;
    emitter.on('start', function(rawBlueprint, callback) {
      var ciEnvVar, ciEnvVars, ciVar, ciVars, data, envVarName, envVarNames, path, _i, _j, _len, _len1;
      _this.uuid = uuid.v4();
      _this.startedAt = Math.round(new Date().getTime() / 1000);
      ciVars = [/^TRAVIS/, /^CIRCLE/, /^CI/];
      envVarNames = Object.keys(process.env);
      ciEnvVars = {};
      for (_i = 0, _len = envVarNames.length; _i < _len; _i++) {
        envVarName = envVarNames[_i];
        ciEnvVar = false;
        for (_j = 0, _len1 = ciVars.length; _j < _len1; _j++) {
          ciVar = ciVars[_j];
          if (envVarName.match(ciVar) !== null) {
            ciEnvVar = true;
          }
        }
        if (ciEnvVar === true) {
          ciEnvVars[envVarName] = process.env[envVarName];
        }
      }
      data = {
        blueprint: rawBlueprint,
        agent: process.env['DREDD_AGENT'] || process.env['USER'],
        agentRunUuid: _this.uuid,
        hostname: process.env['DREDD_HOSTNAME'] || os.hostname(),
        startedAt: _this.startedAt,
        "public": true,
        status: 'running',
        agentEnvironment: ciEnvVars
      };
      path = '/apis/' + _this.configuration['apiSuite'] + '/tests/runs';
      return _this._performRequest(path, 'POST', data, function(error, response, parsedBody) {
        if (error) {
          console.log(error);
          return callback();
        } else {
          _this.remoteId = parsedBody['_id'];
          return callback();
        }
      });
    });
    emitter.on('test pass', function(test) {
      var data, path;
      data = _this._transformTestToReporter(test);
      path = '/apis/' + _this.configuration['apiSuite'] + '/tests/steps?testRunId=' + _this.remoteId;
      return _this._performRequest(path, 'POST', data, function(error, response, parsedBody) {
        if (error) {
          return console.log(error);
        }
      });
    });
    emitter.on('test fail', function(test) {
      var data, path;
      data = _this._transformTestToReporter(test);
      path = '/apis/' + _this.configuration['apiSuite'] + '/tests/steps?testRunId=' + _this.remoteId;
      return _this._performRequest(path, 'POST', data, function(error, response, parsedBody) {
        if (error) {
          return console.log(error);
        }
      });
    });
    return emitter.on('end', function(callback) {
      var data, path;
      data = {
        endedAt: Math.round(new Date().getTime() / 1000),
        result: _this.stats,
        status: _this.stats['failures'] > 0 || _this.stats['errors'] > 0 ? 'failed' : 'passed'
      };
      path = '/apis/' + _this.configuration['apiSuite'] + '/tests/run/' + _this.remoteId;
      return _this._performRequest(path, 'PATCH', data, function(error, response, parsedBody) {
        if (error) {
          console.log(error);
        }
        return callback();
      });
    });
  };

  ApiaryReporter.prototype._transformTestToReporter = function(test) {
    var data;
    data = {
      testRunId: this.remoteId,
      origin: test['origin'],
      duration: test['duration'],
      result: test['status'],
      resultData: {
        request: test['request'],
        realResponse: test['actual'],
        expectedResponse: test['expected'],
        result: test['results']
      }
    };
    return data;
  };

  ApiaryReporter.prototype._performRequest = function(path, method, body, callback) {
    var buffer, handleRequest, info, options, parsedUrl, req, system;
    buffer = "";
    handleRequest = function(res) {
      var _this = this;
      res.on('data', function(chunk) {
        if (this.verbose) {
          console.log('REST Reporter HTTPS Response chunk: ' + chunk);
        }
        return buffer = buffer + chunk;
      });
      res.on('error', function(error) {
        if (this.verbose) {
          console.log('REST Reporter HTTPS Response error.');
        }
        return callback(error, req, res);
      });
      return res.on('end', function() {
        var info, parsedBody;
        if (_this.verbose) {
          console.log('Rest Reporter Response ended');
        }
        parsedBody = JSON.parse(buffer);
        if (_this.verbose) {
          info = {
            headers: res.headers,
            statusCode: res.statusCode,
            body: parsedBody
          };
          console.log('Rest Reporter Response:', JSON.stringify(info, null, 2));
        }
        return callback(void 0, res, parsedBody);
      });
    };
    parsedUrl = url.parse(this.configuration['apiUrl']);
    system = os.type() + ' ' + os.release() + '; ' + os.arch();
    options = {
      host: parsedUrl['hostname'],
      port: parsedUrl['port'],
      path: path,
      method: method,
      headers: {
        'User-Agent': "Dredd REST Reporter/" + packageConfig['version'] + " (" + system + ")",
        'Content-Type': 'application/json'
      }
    };
    if (this.configuration['apiToken'] !== null) {
      options.headers['Authentication'] = 'Token ' + this.configuration['apiToken'];
    }
    if (this.verbose) {
      info = {
        options: options,
        body: body
      };
      console.log('Rest Reporter Request:', JSON.stringify(info, null, 2));
    }
    if (this.configuration.apiUrl.startsWith('https')) {
      if (this.verbose) {
        console.log('Starting REST Reporter HTTPS Request');
      }
      req = https.request(options, handleRequest);
    } else {
      if (this.verbose) {
        console.log('Starting REST Reporter HTTP Response');
      }
      req = http.request(options, handleRequest);
    }
    req.write(JSON.stringify(body));
    return req.end();
  };

  return ApiaryReporter;

})();

module.exports = ApiaryReporter;

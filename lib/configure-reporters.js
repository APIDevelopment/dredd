// Generated by CoffeeScript 1.6.3
var ApiaryReporter, BaseReporter, CliReporter, DotReporter, HtmlReporter, MarkdownReporter, NyanCatReporter, XUnitReporter, cliReporters, configureReporters, fileReporters, intersection, logger,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

BaseReporter = require('./reporters/base-reporter');

XUnitReporter = require('./reporters/x-unit-reporter');

CliReporter = require('./reporters/cli-reporter');

DotReporter = require('./reporters/dot-reporter');

NyanCatReporter = require('./reporters/nyan-reporter');

HtmlReporter = require('./reporters/html-reporter');

MarkdownReporter = require('./reporters/markdown-reporter');

ApiaryReporter = require('./reporters/apiary-reporter');

logger = require('./logger');

fileReporters = ['junit', 'html', 'markdown', 'apiary'];

cliReporters = ['dot', 'nyan'];

intersection = function(a, b) {
  var value, _i, _len, _ref, _results;
  if (a.length > b.length) {
    _ref = [b, a], a = _ref[0], b = _ref[1];
  }
  _results = [];
  for (_i = 0, _len = a.length; _i < _len; _i++) {
    value = a[_i];
    if (__indexOf.call(b, value) >= 0) {
      _results.push(value);
    }
  }
  return _results;
};

configureReporters = function(config, stats, tests) {
  var addCli, addReporter, baseReporter, i, outputs, path, reporter, reporters, usedFileReporters, usedFileReportersLength, _i, _len, _results;
  baseReporter = new BaseReporter(config.emitter, stats, tests);
  reporters = config.options.reporter;
  outputs = config.options.output;
  addCli = function(reporters) {
    var cliReporter, usedCliReporters;
    if (reporters.length > 0) {
      usedCliReporters = intersection(reporters, cliReporters);
      if (usedCliReporters.length === 0) {
        return cliReporter = new CliReporter(config.emitter, stats, tests, config.options['inline-errors'], config.options.details);
      } else {
        return addReporter(usedCliReporters[0], config.emitter, stats, tests);
      }
    } else {
      return cliReporter = new CliReporter(config.emitter, stats, tests, config.options['inline-errors'], config.options.details);
    }
  };
  addReporter = function(reporter, emitter, stats, tests, path) {
    var apiaryReporter, dotReporter, htmlReporter, mdReporter, nyanCatReporter, xUnitReporter;
    switch (reporter) {
      case 'junit':
        return xUnitReporter = new XUnitReporter(emitter, stats, tests, path, config.options.details);
      case 'dot':
        return dotReporter = new DotReporter(emitter, stats, tests);
      case 'nyan':
        return nyanCatReporter = new NyanCatReporter(emitter, stats, tests);
      case 'html':
        return htmlReporter = new HtmlReporter(emitter, stats, tests, path, config.options.details);
      case 'markdown':
        return mdReporter = new MarkdownReporter(emitter, stats, tests, path, config.options.details);
      case 'apiary':
        return apiaryReporter = new ApiaryReporter(emitter, stats, tests);
      default:
        return logger.warn('Invalid reporter #{reporter} selected, ignoring.');
    }
  };
  if (!config.options.silent) {
    addCli(reporters);
  }
  usedFileReporters = intersection(reporters, fileReporters);
  stats.fileBasedReporters = usedFileReporters.length;
  if (usedFileReporters.length > 0) {
    usedFileReportersLength = usedFileReporters.length;
    if (reporters.indexOf('apiary') !== -1) {
      usedFileReportersLength = usedFileReportersLength - 1;
      if (process.env['DREDD_REST_TOKEN'] === void 0 || process.env['DREDD_REST_SUITE'] === void 0) {
        logger.warn("Apiary reporter environment variable DREDD_REST_TOKEN or DREDD_REST_SUITE not defined.");
      }
    }
    if (usedFileReportersLength > outputs.length) {
      logger.warn("There are more reporters requiring output paths than there are output paths provided, using default paths for additional file-based reporters.");
    }
    _results = [];
    for (i = _i = 0, _len = usedFileReporters.length; _i < _len; i = ++_i) {
      reporter = usedFileReporters[i];
      path = outputs[i] ? outputs[i] : null;
      _results.push(addReporter(reporter, config.emitter, stats, tests, path));
    }
    return _results;
  }
};

module.exports = configureReporters;
